{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","_this$state","important","length","props","add","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.daa0720a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate,\r\n  };\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked,\r\n    });\r\n  };\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const { text, date, important } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, important);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <div className=\"form__header\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            placeholder=\"Dodaj zadanie\"\r\n            onChange={this.handleText}\r\n          />\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            id=\"important\"\r\n            onChange={this.handleCheckbox}\r\n          />\r\n          <label htmlFor=\"important\">Priorytet </label>\r\n        </div>\r\n\r\n        <div className=\"form__header\">\r\n          <label htmlFor=\"date\"> Do kiedy zrobić:</label>\r\n          <input\r\n            type=\"date\"\r\n            value={this.state.date}\r\n            min={this.minDate}\r\n            max={maxDate}\r\n            onChange={this.handleDate}\r\n          />\r\n        </div>\r\n        <button className=\"form__button\" onClick={this.handleClick}>\r\n          Dodaj\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = (props) => {\r\n  const style = {\r\n    color: \"red\",\r\n  };\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"task\">\r\n        <p className=\"task__paragraph\">\r\n          <strong style={important ? style : null}>{text}</strong> - do\r\n          <span>{date} </span>\r\n          <span className=\"task_button--group\">\r\n            <button className=\"task__button\" onClick={() => props.change(id)}>\r\n              Zostało zrobione\r\n            </button>\r\n            <button className=\"task__button\" onClick={() => props.delete(id)}>\r\n              Usuń\r\n            </button>\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n\r\n    return (\r\n      <div className=\"task\">\r\n        <p className=\"task__paragraph\">\r\n          <strong>{text}</strong> - do\r\n          <em>(Zrobić do {date}) </em>\r\n          <span className=\"task_button--group\">\r\n            - potwierdzenie wykonania <span> {finish}</span>\r\n            <button className=\"task__button\" onClick={() => props.delete(id)}>\r\n              X\r\n            </button>\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = (props) => {\r\n  const active = props.tasks.filter((task) => task.active);\r\n  const done = props.tasks.filter((task) => !task.active);\r\n\r\n  const activeTasks = active.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  const doneTasks = done.map((task) => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h2 className=\"active__header\">Zadania do zrobienia:</h2>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n      </div>\r\n      <div className=\"done\">\r\n        <h3 className=\"done__header\">Zadania zrobione: {done.length}</h3>\r\n\r\n        {done.length > 5 && (\r\n          <span style={{ fontSize: \"15px\" }}>\r\n            Wyswietlone jest jedynie 5 zadań\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 9;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"zagrać wreszcie w Wiedźmina 3\",\n        date: \"2018-02-15\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: \"pomalować dom\",\n        date: \"2022-09-11\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: \"schudnąć 10 kilogramów\",\n        date: \"2022-05-20\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 5,\n        text: \"jeszcze raz pomalować dom\",\n        date: \"2022-09-11\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 6,\n        text: \"fryzjer!!!\",\n        date: \"2022-05-20\",\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 7,\n        text: \"nie odbierać poleconego od komornika\",\n        date: \"2020-11-12\",\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n    ],\n  };\n\n  deleteTask = (id) => {\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex((task) => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState({\n    //   tasks,\n    // });\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter((task) => task.id !== id);\n    this.setState({\n      tasks,\n    });\n  };\n\n  changeTaskStatus = (id) => {\n    let tasks = [...this.state.tasks];\n    tasks.forEach((task) => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks,\n    });\n  };\n\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    };\n    this.counter++;\n    this.setState((prevState) => ({\n      tasks: [...prevState.tasks, task],\n    }));\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TODO APP</h1>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}